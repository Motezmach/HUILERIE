// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  password      String
  email         String?   @unique
  firstName     String?
  lastName      String?
  role          UserRole  @default(ADMIN)
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Farmer {
  id                   String             @id @default(uuid())
  name                 String
  nickname             String?            // Optional nickname field
  phone                String?
  type                 FarmerType         @default(SMALL)
  pricePerKg           Decimal?           // Made nullable - pricing is now per-session
  dateAdded            DateTime           @default(now())
  totalAmountDue       Decimal            @default(0)
  totalAmountPaid      Decimal            @default(0)
  paymentStatus        PaymentStatus      @default(PENDING)
  lastProcessingDate   DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Temporary assignments (current active boxes)
  currentBoxes         Box[]              @relation("CurrentFarmerBoxes")
  processingSessions   ProcessingSession[]
  
  @@map("farmers")
}

model Box {
  id                   String             @id  // Fixed IDs from "1" to "600"
  type                 BoxType            @default(NORMAL)
  status               BoxStatus          @default(AVAILABLE)
  
  // Current assignment (nullable - box can be unassigned)
  currentFarmerId      String?
  currentWeight        Decimal?
  assignedAt           DateTime?
  isSelected           Boolean            @default(false)
  
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Relationships
  currentFarmer        Farmer?            @relation("CurrentFarmerBoxes", fields: [currentFarmerId], references: [id], onDelete: SetNull)
  sessionBoxes         SessionBox[]
  
  @@map("boxes")
}

model ProcessingSession {
  id                   String             @id @default(uuid())
  farmerId             String
  sessionNumber        String             @unique
  processingDate       DateTime?
  oilWeight            Decimal            @default(0)
  totalBoxWeight       Decimal
  boxCount             Int
  totalPrice           Decimal?           // Made nullable - will be set during payment
  pricePerKg           Decimal?           // Made nullable - will be set during payment
  amountPaid           Decimal            @default(0)  // Track partial payments
  remainingAmount      Decimal            @default(0)  // Track remaining balance
  processingStatus     ProcessingStatus   @default(PENDING)
  paymentStatus        PaymentStatus      @default(UNPAID)
  paymentDate          DateTime?
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  farmer               Farmer             @relation(fields: [farmerId], references: [id], onDelete: Cascade)
  sessionBoxes         SessionBox[]
  paymentTransactions  PaymentTransaction[] // New relation for payment history
  
  @@map("processing_sessions")
}

model SessionBox {
  id                   String             @id @default(uuid())
  sessionId            String
  boxId                String             // Always populated with actual box ID (1-600)
  boxWeight            Decimal
  boxType              BoxType
  farmerId             String             // Track which farmer used this box
  createdAt            DateTime           @default(now())
  
  session              ProcessingSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  box                  Box                @relation(fields: [boxId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, boxId])
  @@map("session_boxes")
}

model PaymentTransaction {
  id                   String             @id @default(uuid())
  sessionId            String
  amount               Decimal            // Amount paid in this transaction
  paymentDate          DateTime           @default(now())
  paymentMethod        String?            // Optional: cash, bank, etc.
  notes                String?            // Optional payment notes
  createdAt            DateTime           @default(now())
  
  session              ProcessingSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("payment_transactions")
}

model DashboardMetrics {
  id                   String             @id @default(uuid())
  metricDate           DateTime           @unique
  totalFarmers         Int                @default(0)
  totalBoxes           Int                @default(0)
  activeBoxes          Int                @default(0)
  pendingExtractions   Int                @default(0)
  todayRevenue         Decimal            @default(0)
  totalRevenue         Decimal            @default(0)
  averageOilExtraction Decimal            @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  @@map("dashboard_metrics")
}

enum FarmerType {
  SMALL
  LARGE
}

enum BoxType {
  NCHIRA
  CHKARA
  NORMAL
}

enum BoxStatus {
  AVAILABLE       // Box is free and can be assigned to any farmer
  IN_USE         // Box is currently assigned to a farmer with olives
}

enum ProcessingStatus {
  PENDING
  PROCESSED
}

enum PaymentStatus {
  UNPAID     // No payment made
  PARTIAL    // Partial payment made
  PAID       // Full payment completed
  PENDING    // Used for farmer-level status
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

// ==================== FACTORY STOCK MANAGEMENT ====================

model OilSafe {
  id                   String             @id @default(uuid())
  name                 String             @unique
  capacity             Decimal            // Maximum capacity in liters/kg
  currentStock         Decimal            @default(0) // Current oil stock in liters/kg
  description          String?            // Optional description
  isActive             Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  purchases            OlivePurchase[]
  sales                OilSale[]
  
  @@map("oil_safes")
}

model OlivePurchase {
  id                   String             @id @default(uuid())
  purchaseDate         DateTime           @default(now())
  farmerName           String             // Name of farmer we bought from
  farmerPhone          String?            // Optional phone number
  oliveWeight          Decimal            // Weight of olives purchased in kg
  pricePerKg           Decimal            // Price per kg paid
  totalCost            Decimal            // Total cost of purchase
  oilProduced          Decimal?           // Oil produced from these olives in kg (nullable - pending production)
  yieldPercentage      Decimal?           // Yield percentage (oil/olives * 100) (nullable - pending production)
  safeId               String             // Which safe stores this oil
  notes                String?            // Optional notes
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  safe                 OilSafe            @relation(fields: [safeId], references: [id], onDelete: Cascade)
  
  @@map("olive_purchases")
}

model OilSale {
  id                   String             @id @default(uuid())
  saleDate             DateTime           @default(now())
  safeId               String             // Which safe the oil comes from
  quantity             Decimal            // Quantity of oil sold in liters/kg
  pricePerKg           Decimal            // Sale price per kg
  totalRevenue         Decimal            // Total revenue from sale
  buyer                String?            // Name of buyer (optional)
  buyerPhone           String?            // Buyer phone (optional)
  notes                String?            // Optional notes
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  safe                 OilSafe            @relation(fields: [safeId], references: [id], onDelete: Cascade)
  
  @@map("oil_sales")
}
